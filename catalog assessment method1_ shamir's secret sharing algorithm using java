#include <bits/stdc++.h>
using namespace std;

// Function to calculate the value of y
int calculate_Y(int x, vector<int>& poly) {
    int y = 0;
    int temp = 1;

    for (auto coeff : poly) {
        y = (y + (coeff * temp));
        temp = (temp * x);
    }
    return y;
}

// Function to perform the secret sharing algorithm and encode the given secret
void secret_sharing(int S, vector<pair<int, int>>& points, int N, int K) {
    vector<int> poly(K);
    poly[0] = S;

    for (int j = 1; j < K; ++j) {
        int p = 0;
        while (p == 0)
            p = (rand() % 997);
        poly[j] = p;
    }

    for (int j = 1; j <= N; ++j) {
        int x = j;
        int y = calculate_Y(x, poly);
        points[j - 1] = {x, y};
    }
}

struct fraction {
    int num, den;

    fraction(int n, int d) {
        num = n, den = d;
    }

    void reduce_fraction(fraction& f) {
        int gcd = __gcd(f.num, f.den);
        f.num /= gcd, f.den /= gcd;
    }

    fraction operator*(fraction f) {
        fraction temp(num * f.num, den * f.den);
        reduce_fraction(temp);
        return temp;
    }

    fraction operator+(fraction f) {
        fraction temp(num * f.den + den * f.num, den * f.den);
        reduce_fraction(temp);
        return temp;
    }
};

// Function to generate the secret back from the given points
int Generate_Secret(int x[], int y[], int M) {
    fraction ans(0, 1);

    for (int i = 0; i < M; ++i) {
        fraction l(y[i], 1);
        for (int j = 0; j < M; ++j) {
            if (i != j) {
                fraction temp(-x[j], x[i] - x[j]);
                l = l * temp;
            }
        }
        ans = ans + l;
    }

    return ans.num;
}

// Function to encode and decode the given secret
void operation(int S, int N, int K) {
    vector<pair<int, int>> points(N);
    secret_sharing(S, points, N, K);

    // Only output the secret in the required format
    int M = K;  // Use the minimum number of points required to reconstruct the secret

    int* x = new int[M];
    int* y = new int[M];

    // Input M points to get back the secret
    for (int i = 0; i < M; ++i) {
        x[i] = points[i].first;
        y[i] = points[i].second;
    }

    // Get back our result again.
    int secret = Generate_Secret(x, y, M);
    cout << "Secret (constant term) for test case: " << secret << endl;

    delete[] x;
    delete[] y;
}

// Driver Code
int main() {
    // First test case
    int S1 = 123; 
    int N1 = 4; 
    int K1 = 2; 
    operation(S1, N1, K1);

    // Second test case
    int S2 = 456; 
    int N2 = 4; 
    int K2 = 2; 
    operation(S2, N2, K2);

    return 0;
}